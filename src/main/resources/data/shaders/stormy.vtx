/*{
	"DESCRIPTION": "stormy",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
         {
            "NAME": "cscale",
            "TYPE": "float",
            "DEFAULT": 1.1,
            "MIN": -1.0,
            "MAX": 5.0
         },
{
            "NAME": "cdark",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.0,
            "MAX": 2.0
         },
         {
            "NAME": "clight",
            "TYPE": "float",
            "DEFAULT": 0.3,
            "MIN": 0.0,
            "MAX": 2.0
         },
{
            "NAME": "ccover",
            "TYPE": "float",
            "DEFAULT": 0.2,
            "MIN": 0.0,
            "MAX": 2.0
         },
         {
            "NAME": "calpha",
            "TYPE": "float",
            "DEFAULT": 8.0,
            "MIN": 0.00,
            "MAX": 40.0
         },
         {
            "NAME": "skytnt",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.00,
            "MAX": 1.0
         },
{
            "NAME": "lpos",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": -2.00,
            "MAX": 2.0
         },
{
            "NAME": "lnum",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.1,
            "MAX": 10.0
         },
{
            "NAME": "lden",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": .1,
            "MAX": 10
         }
	]
}*/

#version 330
uniform float fTime;
uniform float cscale;
uniform float cdark;
uniform float clight;
uniform float ccover;
uniform float calpha;
uniform float skytnt;
uniform float lpos;
uniform float lnum;
uniform float lden;

layout (location = 0) in vec3 position;
out vec3 outColor;


#include <palettes.vti>
#include <sdf2d.vti>
#include <consts.vti>

const vec3 skycolour1 = vec3(0.0, 0.0, 0.1);
const vec3 skycolour2 = vec3(0.0, 0.0, 0.1);

const mat2 m = mat2(1.6, 1.2, -1.2, 1.6);

vec2 hash(vec2 p) {
    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float noise(in vec2 p) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
    vec2 i = floor(p + (p.x + p.y) * K1);
    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0 * K2;
    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
    vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));
    return dot(n, vec3(70.0));
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = 0.1;
    for (int i = 0; i < 7; i++) {
        total += noise(n) * amplitude;
        n = m * n;
        amplitude *= 0.4;
    }
    return total;
}

// -----------------------------------------------

void main() {
    vec2 p = position.xy;
    vec2 uv = p;
    float time = fTime;
    float q = fbm(uv * cscale * 0.5);

    //ridged noise shape
    float r = 0.0;
    uv *= cscale;
    uv -= q - time;
    float weight = 0.8;
    for (int i = 0; i < 8; i++) {
        r += abs(weight * noise(uv));
        uv = m * uv + time;
        weight *= 0.7;
    }

    //noise shape
    float f = 0.0;
    uv = p;
    uv *= cscale;
    uv -= q - time;
    weight = 0.7;
    for (int i = 0; i < 8; i++) {
        f += weight * noise(uv);
        uv = m * uv + time;
        weight *= 0.6;
    }

    f *= r + f;

    //noise colour
    float c = 0.0;
    time = fTime * 2.0;
    uv = p;
    uv *= cscale * 2.0;
    uv -= q - time;
    weight = 0.4;
    for (int i = 0; i < 7; i++) {
        c += weight * noise(uv);
        uv = m * uv + time;
        weight *= 0.6;
    }

    //noise ridge colour
    float c1 = 0.0;
    time = fTime * 3.0;
    uv = p;
    uv *= cscale * 3.0;
    uv -= q - time;
    weight = 0.4;
    for (int i = 0; i < 7; i++) {
        c1 += abs(weight * noise(uv));
        uv = m * uv + time;
        weight *= 0.6;
    }

    c += c1;
    float dist = length(vec2(lpos, 0.5)-p);
    float clightpos = clight * (lnum/(lden*dist));
    vec3 skycolour = mix(skycolour2, skycolour1, p.y);
    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((cdark + clightpos * c), 0.0, 1.0);

    f = ccover + calpha * f * r;

    vec3 result = mix(skycolour, clamp(skytnt * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));

    outColor = result;
}
