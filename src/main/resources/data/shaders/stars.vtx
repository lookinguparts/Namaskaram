/*{
	"DESCRIPTION": "Stars",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
         {
            "NAME": "numlayers",
            "TYPE": "float",
            "DEFAULT": 6.0,
            "MIN": 1.0,
            "MAX": 20.0
         },
         {
            "NAME": "uvscale",
            "TYPE": "float",
            "DEFAULT": 6.0,
            "MIN": 1.0,
            "MAX": 20.0
         },
         {
            "NAME": "uvsclMn",
            "TYPE": "float",
            "DEFAULT": 0.5,
            "MIN": 0.1,
            "MAX": 5.0
         },
         {
            "NAME": "speed",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.0,
            "MAX": 2.0
         },
         {
            "NAME": "rotspeed",
            "TYPE": "float",
            "DEFAULT": 0.3,
            "MIN": -2.0,
            "MAX": 2.0
         },
         {
            "NAME": "bright",
            "TYPE": "float",
            "DEFAULT": 0.05,
            "MIN": 0.0,
            "MAX": 0.5
         },
         {
            "NAME": "falloff",
            "TYPE": "float",
            "DEFAULT": 0.4,
            "MIN": 0.0,
            "MAX": 2.0
         },
         {
            "NAME": "sparkle",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 5.0
         },
         {
            "NAME": "twinklespd",
            "TYPE": "float",
            "DEFAULT": 3.0,
            "MIN": 0.0,
            "MAX": 10.0
         },
         {
            "NAME": "twinkleamt",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 2.0
         },
         {
            "NAME": "starsizescl",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 5.0
         },
         {
            "NAME": "palval",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": 0.0,
            "MAX": 20.0
         },
         {
            "NAME": "paloff",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": 0.0,
            "MAX": 1.0
         }
	]
}*/

#version 330

uniform float fTime;
uniform float numlayers;
uniform float uvscale;
uniform float uvsclMn;
uniform float speed;
uniform float rotspeed;
uniform float bright;
uniform float falloff;
uniform float sparkle;
uniform float twinklespd;
uniform float twinkleamt;
uniform float starsizescl;
uniform float palval;
uniform float paloff;

#include <palettes.vti>
#include <sdf2d.vti>
#include <consts.vti>

layout(location = 0) in vec3 position;
out vec3 outColor;

mat2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return mat2(c, -s, s, c);
}

float Star(vec2 uv, float flare) {
    float d = length(uv);
    float m = bright/d;

    float rays = max(0., 1.-abs(uv.x*uv.y*1000.));
    m += rays*flare;
    uv *= Rot(3.1415/4.);
    rays = max(0., 1.-abs(uv.x*uv.y*1000.));
    m += rays*.3*flare;
    m *= smoothstep(1., falloff, d);
    
    return m;
}

float Hash21(vec2 p) {
    p = fract(p*vec2(123.34, 456.21));
    p += dot(p, p+45.32);
    return fract(p.x*p.y);
}

vec3 StarLayer(vec2 uv) {
    vec2 gv = fract(uv)-.5;
    vec2 id = floor(uv);
    
    vec3 col = vec3(0., 0., 0.);
    for (float y=-1.; y <=1.; y++) {
        for (float x=-1; x<=1.; x++) {
            vec2 offs = vec2(x, y);
            float n = Hash21(id+offs);
            float size = fract(n*345.32);
            float star = Star(gv-offs-vec2(n, fract(n*10))+.5, smoothstep(size, .1, 1.));
            
            // Use palette for star colors
            float palIndex = paloff + fract(n*2345.2);
            vec3 color = paletteN(palIndex, palval);
            
            star *= sin(fTime*twinklespd+n*6.2831)*.5+twinkleamt;
            col += star*size*starsizescl*color;
        }
    }
    return col;
}

void main() {
    vec2 uv = position.xy;
    
    // Convert to centered coordinates
    uv = uv * 2.0 - 1.0;
    
    float t = fTime * speed;
    uv *= Rot(fTime*rotspeed);
    vec3 col = vec3(0.);
    
    for (float i=0.; i < 1.; i+=1./numlayers) {
        float depth = fract(i+t);
        float scale = mix(uvscale, uvsclMn, depth);
        float fade = depth*smoothstep(1.,.9, depth);
        col += StarLayer(uv*scale+i*453.2)*fade;
    }
    
    outColor = clamp(col, 0., 1.);
}