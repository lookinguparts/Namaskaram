/*{
	"DESCRIPTION": "Rainbow Semicircle",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
        {
            "NAME": "startRadius",
            "TYPE": "float",
            "DEFAULT": 0.2,
            "MIN": 0.0,
            "MAX": 1.0
        },
        {
            "NAME": "thickness",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.01,
            "MAX": 0.5
        },
        {
            "NAME": "brt",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.1,
            "MAX": 5.0
        }
	]
}*/

#version 330

uniform float fTime;
uniform float startRadius;
uniform float thickness;
uniform float brt;

layout(location = 0) in vec3 position;
out vec3 outColor;

#include <consts.vti>

// Rainbow colors from RainbowColor.java
vec3 rainbowColors[6] = vec3[6](
    vec3(1.0, 0.0, 0.0),        // RED
    vec3(1.0, 0.498, 0.0),      // ORANGE (0xff7f00 -> 0x7f = 127/255 ≈ 0.498)
    vec3(1.0, 1.0, 0.0),        // YELLOW
    vec3(0.0, 1.0, 0.0),        // GREEN
    vec3(0.0, 0.0, 1.0),        // BLUE
    vec3(0.545, 0.0, 1.0)       // VIOLET (0x8b00ff -> 0x8b = 139/255 ≈ 0.545)
);

float Hash21(vec2 p) {
    p = fract(p*vec2(123.34, 456.21));
    p += dot(p, p+45.32);
    return fract(p.x*p.y);
}

// dust
const float cloudscale = 4.1;
const float speed = 0.03;
const float clouddark = 0.05;
const float cloudlight = 0.01;
const float cloudcover = 0.01;
const float cloudalpha = 1.0;
const float skytint = 0.5;
const vec3 skycolour1 = vec3(0.0, 0.0, 0.0);
const vec3 skycolour2 = vec3(0.0, 0.0, 0.0);

const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );

vec2 hash( vec2 p ) {
p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
vec2 i = floor(p + (p.x+p.y)*K1);
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));
}

float fbm(vec2 n) {
float total = 0.0, amplitude = 0.1;
for (int i = 0; i < 7; i++) {
total += noise(n) * amplitude;
n = m * n;
amplitude *= 0.4;
}
return total;
}

// -----------------------------------------------

vec3 dust( vec2 uv ) {
    vec2 p = uv;
    p *= .05;
    float time = fTime * speed;
    float q = fbm(uv * cloudscale * 0.5);
    vec2 windDirection = vec2(10.0, 0.);
    vec2 movement = windDirection * time;
   
    //ridged noise shape
    float r = 0.0;
    uv *= cloudscale;
    //uv -= q - time;
    uv.x -= q - movement.x;
    uv.y -= q - movement.y;
    float weight = 0.8;
    for (int i=0; i<8; i++){
    r += abs(weight*noise( uv ));
        uv = m*uv + time;
        weight *= 0.7;
    }
   
    //noise shape
    float f = 0.0;
    uv = p;
    uv *= cloudscale;
    //uv.x -= q - time;
    uv.x -= q - movement.x;
    uv.y -= q - movement.y;
    weight = 0.1;
    for (int i=0; i<8; i++){
        f += weight*noise( uv );
        uv = m*uv + time;
        weight *= 0.6;
    }
   
    f *= r + f;
   
    //noise colour
    float c = 0.0;
    time = fTime * speed * 2.0;
    uv = p;
    uv *= cloudscale*2.0;
    //uv -= q - time;
    uv.x -= q - movement.x;
    uv.y -= q - movement.y;
    weight = 0.4;
    for (int i=0; i<7; i++){
        c += weight*noise( uv );
        uv = m*uv + time;
        weight *= 0.6;
    }
   
    //noise ridge colour
    float c1 = 0.0;
    time = fTime * speed * 3.0;
    uv = p;
    uv *= cloudscale*3.0;
    //uv -= q - time;
    uv.x -= q - movement.x;
    uv.y -= q - movement.y;
    weight = 0.4;
    for (int i=0; i<7; i++){
        c1 += abs(weight*noise( uv ));
        uv = m*uv + time;
        weight *= 0.6;
    }

    c += c1;
   
    vec3 skycolour = mix(skycolour2, skycolour1, p.y);
    vec3 cloudcolour = vec3(.698, .6, .431);// * clamp((clouddark + cloudlight*c), 0.0, 1.0);
   
    cloudcolour *= 1.0;
    f = cloudcover + cloudalpha*f*r;
   
    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));
    
    result *= 1.0;
    return result;
}

void main(){
    vec2 uv = position.xy - 0.5;
    vec3 color = vec3(0.0);
    
    float radius = length(uv);
    
    // Only render in upper half (y > 0) and beyond startRadius
    if (uv.y >= 0.0 && radius > startRadius && radius < startRadius + thickness) {
        // Map distance within the rainbow band to colors
        float bandPosition = (radius - startRadius) / thickness;
        float colorIndex = bandPosition * 6.0; // 5 transitions for 6 colors
        colorIndex = clamp(colorIndex, 0.0, 6.0);
        
        int index = int(floor(colorIndex));
        float t = fract(colorIndex);
        
        // Interpolate between rainbow colors based on position in band
        if (index < 5) {
            color = rainbowColors[index]; //mix(rainbowColors[index], rainbowColors[index + 1], t);
        } else {
            color = rainbowColors[5];
        }
        
        color *= brt;
    } else if (uv.y < 0.0) {
        color = vec3(.698, .6, .431) * (Hash21(uv) * .35+ .65)*.8;
    } else {
        color = vec3(.51, .792, .988) * .3;
    }
    vec3 dusty = dust(uv);
    dusty = clamp(dusty, 0.0, 1.0);

    float dustBrightness = (dusty.r + dusty.g + dusty.b)/3.0;
    float dustAlpha = dustBrightness * .35; //clamp(dustBrightness * .35 * (1.-uv.y*1.5+0.5), 0.,1.0);

    
    outColor = mix(color, dusty, dustAlpha);
}